snippet #! 		shebang python3
	#!/usr/bin/env python3

snippet #!2 		shebang python2 + utf 8 encoding
	#!/usr/bin/env python2
	# -*- coding: utf-8 -*-

snippet imp 		import module
	import ${0:module}

snippet from 		from package import module
	from ${1:package} import ${0:module}

snippet docs 		module docstring
	"""
	File: ${1:file name}
	Author: `g:snips_author`
	Email: `g:snips_email`
	Github: `g:snips_github`
	Description: ${2:description...}
	"""

snippet sk 		skip unittests
	@unittest.skip(${1:skip_reason})

snippet wh 		while loop
	while ${1:condition}:
		${2:code...}

snippet with 		with ... as ...
	with ${1:expr} as ${2:var}:
		${0:${VISUAL}}

snippet awith 		async with ... as ...
	async with ${1:expr} as ${2:var}:
		${0:${VISUAL}}

snippet ccl 		child class
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4

snippet cl 		class
	class ${1:ClassName}:
		"""${2:docstring for $1}"""
		def __init__(self, ${3:arg}):
			self.$3 = $3

snippet dcl 		dataclass
	@dataclass
	class ${1:ClassName}:
		"""${2:description}"""
		${3:var_1}: ${4:int}
		${5:var_2}: ${6:float} = ${7:0}

		def ${8:total}(self): -> $6:
			return ${0:self.$3 * self.$5}

snippet def 		new function
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${3:code...}

snippet adef 		new async function
	async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${3:code...}

snippet defi 		new init method
	def __init__(self, ${1:args}):
		${0:code...}

snippet defm 		new method
	def ${1:mname}(self, ${2:arg}):
		${0:code...}

snippet adefm 		new async method
	async def ${1:mname}(self, ${2:arg}):
		${0:code...}

snippet property 		new property
	@property
	def ${1:foo}(self) -> ${2:type}:
		"""${3:doc}"""
		return self._$1

	@$1.setter
	def $1(self, value: $2):
		self._$1 = value

snippet for 		for loop
	for ${1:item} in ${2:items}:
		${3:code...}

snippet cutf8 		utf-8 encoding
	# -*- coding: utf-8 -*-

snippet ld 		lambda
	${1:var} = lambda ${2:vars} : ${0:action}

snippet . 		self.
	self.

snippet sa 		self.attribute = attribute
	self.${1:attribute} = $1

snippet try 		Try/Except
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${0:raise $3}

snippet trye 		Try/Except/Else
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${0}

snippet tryf 		Try/Except/Finally
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	finally:
		${0}

snippet tryef 		Try/Except/Else/Finally
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${5}
	finally:
		${0}

snippet ifmain 		if __name__ == "__main__"
	if __name__ == '__main__':
		${0:main()}

snippet _ 		"dunder"
	__${1:init}__

snippet " 		"docstring"
	"""${0:doc}
	"""

snippet a= 		"assertEqual"
	self.assertEqual(${0}, ${1})

snippet test 		test function/method
	def test_${1:description}(${2:`indent('.') ? 'self' : ''`}):
		${0}

snippet testcase 		new testcase
	class ${1:ExampleCase}(unittest.TestCase):

		def test_${2:description}(self):
			${0}

snippet tgwt 		test given, when, then
	# given: ${1}
	# when: ${2}
	# then: ${3}

snippet fut 		from future import
	from __future__ import ${0}

snippet args 		"*args"
	*args${1:,}${0}
snippet kwargs 		"**kwargs"
	**kwargs${1:,}${0}
snippet akw 		"*args, **kwargs"
	*args, **kwargs${1:,}${0}

snippet lcp 		list comprehension
	[${1} for ${2} in ${3:${VISUAL}}]${0}

snippet dcp 		dict comprehension
	{${1}: ${2} for ${3} in ${4:${VISUAL}}}${0}

snippet scp 		set comprehension
	{${1} for ${2} in ${3:${VISUAL}}}${0}

snippet pr 		print variable
	print($0)

snippet prs 		print string
	print("$0")

snippet prf 		print f-string
	print(f"$0")

snippet fpr 		print variable to file
	print($0, file=${1:sys.stderr})

snippet fprs 		print string to file
	print("$0", file=${1:sys.stderr})

snippet fprf 		print f-string to file
	print(f"$0", file=${1:sys.stderr})
